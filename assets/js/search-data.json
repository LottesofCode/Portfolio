{
  
    
  
    
        "post1": {
            "title": "Title",
            "content": "GDP and Life Expectancy Project . Introduction . The following project explores the relationship between life expectancy at birth and Gross Domestic Product (GDP) for 6 countries, using data from the World Health Organisation and World Bank. . A study performed in 1975 (and followed up in 2007) by S.H. Preston produced the Preston Curve. The curve indicated that individuals born in wealthy countries can, on average, expect to live longer than those born in poor countries. However, the curve flattens out, as in areas of high income, an increase in income is not associated with an increase in life expectancy. GDP is, however, not the only factor that affects life expectancy. Factors such as wealth distribution, healthcare, education and infrastructure also play an important role. . Aim and Objectives . The aim of this project is to understand the relationship between GDP and life expectancy for Chile, China, Germany, Mexico, USA and Zimbabwe between 2000 and 2015. The following objectives were explored: . What is the average life expectancy and GDP of a country? How are these distributed? | What has been the trend of life expectancy and GDP over the time period? | Is there a correlation between GDP and life expectancy? | . Data . The data is contained in a CSV file (supplied by Codecademy) with 4 columns: Country, Year, Life expectancy at birth / years and GDP. | For each country the average life expectancy and GDP is listed for each year between 2000 and 2015, inclusive. | . Analysis . bar charts for average life expectancy and GDP of each country between 2000 - 2015 | change in GDP over time | change in life expectancy over time | normalised changes in life expectancy and GDP over time for direct comparison | . Results . The average life expectancy of USA, China, Chile, Germany and Mexico fall within a small range of 74.3 to 78.9 years and show a similar distribution. Zimbabwe has an average life expectancy of 50.1 years, with a vast growth shown by the large distribution in the violin plot. There are vast differences between the average GDP values, with the USA having the greatest value. The boxplot shows substantial growth for both USA and China, with China having the largest growth in GDP. | Both GDP and life expectancy have an upward trend. Zimbabwe shows the largest increase in life expectancy with a rapid growth from 44.6 to 50.1 year between 2005 and 2015. China and USA show large growths in GDP, with China having an 813% increase. | . Conclusion . There is a strong positive correlation between GDP and life expectancy at birth for the six countries considered - with the assumption there is a linear relationship between the two factors. | The positive trend between life expectancy and GDP is not always evident over shorter time frames as a marked change in GDP did not correspond to a change in life expectancy. Sometimes an increase in GDP corresponded to a decrease in life expectancy. | The highest GDP does not correspond to the highest life expectancy at birth, as shown by USA which has a very large GDP. | A large increase in GDP does not correlate to a large increase in life expectancy, as in the case of China and Chile both had a large % increase in GDP, which did not correspond to a large increase in life expectancy at birth. . | Overall there is a positive correlation present between GDP and life expectancy at birth. However, GDP is not likely to be the only factor affecting a country&#39;s life expectancy at birth. Other factors which may affect life expectancy at birth are a country&#39;s access to education and healthcare, wealth distribution and infrastructure. All of these play an important role and are related to GDP in some way, indicating GDP has an indirect effect in life expectancy at birth. . | At lower GDP an increase in this GDP appears to have a positive affect on life expectancy, as is the case with Zimbabwe. However, above a certain level, an increase in GDP does not appear to correlate to an increase in life expectancy. | . import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import numpy as np from IPython.display import display, HTML . df = pd.read_csv(r&#39;all_data.csv&#39;) df.rename(columns={&#39;Life expectancy at birth (years)&#39; : &#39;Life_Expectancy&#39;}, inplace=True) df.rename(str.lower, axis=&#39;columns&#39;, inplace=True) df[&#39;country&#39;] = df[&#39;country&#39;].replace([&#39;United States of America&#39;],&#39;USA&#39;) #convert GDP into billions of $ df.gdp = df.gdp / 1e9 years= df.year.unique() chile = df[(df.country == &#39;Chile&#39;)] china = df[(df.country == &#39;China&#39;)] germany = df[(df.country == &#39;Germany&#39;)] mexico = df[(df.country == &#39;Mexico&#39;)] usa = df[(df.country == &#39;USA&#39;)] zimbabwe = df[(df.country == &#39;Zimbabwe&#39;)] country_list = [chile, china, germany, mexico, usa, zimbabwe] . #Average life expectancy f, (ax1, ax2) = plt.subplots(1,2, sharey=False, figsize=(12,5)) sns.barplot(data=df, x=&#39;country&#39;, y=&#39;life_expectancy&#39;, ax=ax1) ax1.set_xlabel(&#39;Country&#39;) ax1.set_ylabel(&#39;Life expectancy / Years&#39;) ax1.set_title(&#39;Average life expectancy at birth between 2000 and 2015&#39;) sns.barplot(data=df, x=&#39;country&#39;, y=&#39;gdp&#39;, ax=ax2) ax2.set_xlabel(&#39;Country&#39;) ax2.set_ylabel(&#39;GDP / Billions of USD&#39;) ax2.set_title(&#39;Average GDP between 2000 and 2015&#39;) plt.show() #numerical values for average life expectancy and gdp ave_expect=df.life_expectancy.groupby(df.country).mean().round(1) ave_gdp=df.gdp.groupby(df.country).mean().round(2) print(&#39;Average Life Expectancy&#39;) display(ave_expect) print(&#39;The average GDP (in billions of US$) for each &#39; + str(ave_gdp)) . Average Life Expectancy . country Chile 78.9 China 74.3 Germany 79.7 Mexico 75.7 USA 78.1 Zimbabwe 50.1 Name: life_expectancy, dtype: float64 . The average GDP (in billions of US$) for each country Chile 169.79 China 4957.71 Germany 3094.78 Mexico 976.65 USA 14075.00 Zimbabwe 9.06 Name: gdp, dtype: float64 . #Line plots f, (ax1, ax2) = plt.subplots(1,2, sharey=False, figsize=(12,5)) sns.lineplot(data=df, x=&#39;year&#39;, y=&#39;life_expectancy&#39;, hue=&#39;country&#39;, ax=ax1) ax1.set_xlabel(&#39;Country&#39;) ax1.set_ylabel(&#39;Life expectancy / Years&#39;) ax1.set_title(&#39;Change in life expectancy between 2000 and 2015&#39;) #plt.legend() sns.lineplot(data=df, x=&#39;year&#39;, y=&#39;gdp&#39;, hue=&#39;country&#39;, ax=ax2) ax2.set_xlabel(&#39;Country&#39;) ax2.set_ylabel(&#39;GDP / Billions USD&#39;) ax2.set_title(&#39;Change in GDP between 2000 and 2015&#39;) plt.legend(loc=2) plt.show() #Violin plot for change in life expectancy #boxplot for change in GDP f, (ax3, ax4) = plt.subplots(1,2, sharey=False, figsize=(12,5)) sns.violinplot(data=df, x=&#39;country&#39;, y=&#39;life_expectancy&#39;, ax=ax3) ax3.set_xlabel(&#39;Country&#39;) ax3.set_ylabel(&#39;Life expectancy / Years&#39;) ax3.set_title(&#39;Change in life expectancy between 2000 and 2015&#39;) plt.legend(country_list) sns.boxplot(data=df, x=&#39;country&#39;, y=&#39;gdp&#39;, ax=ax4) ax4.set_xlabel(&#39;Country&#39;) ax4.set_ylabel(&#39;GDP / Billions USD&#39;) ax4.set_title(&#39;Change in GDP between 2000 and 2015&#39;) plt.show() . #Individual plots #function to plot linear regressions of life expectancy over time for each country: def make_regplot(data, color, country, xaxis, yaxis, axisno): plot = sns.regplot(data=data, x=xaxis, y=yaxis, color=color, ax=axisno) axisno.legend([country],loc=3) axisno.set_title(country) axisno.set_ylabel(&#39;&#39;) axisno.set_xlabel(&#39;&#39;) return plot f, (ax1, ax2, ax3, ax4, ax5, ax6) = plt.subplots(1, 6, sharey=False, figsize=(20,5)) f.tight_layout() make_regplot(usa, &#39;purple&#39;, &#39;USA&#39;, &#39;year&#39;, &#39;life_expectancy&#39;, ax1) ax1.set_ylabel(&#39;Life expectancy / Years&#39;) make_regplot(china, &#39;orange&#39;, &#39;China&#39;, &#39;year&#39;, &#39;life_expectancy&#39;, ax2) make_regplot(germany, &#39;green&#39;, &#39;Germany&#39;, &#39;year&#39;, &#39;life_expectancy&#39;, ax3) make_regplot(mexico, &#39;red&#39;, &#39;Mexico&#39;, &#39;year&#39;, &#39;life_expectancy&#39;, ax4) make_regplot(chile, &#39;blue&#39;, &#39;Chile&#39;, &#39;year&#39;, &#39;life_expectancy&#39;, ax5) make_regplot(zimbabwe, &#39;brown&#39;, &#39;Zimbabwe&#39;,&#39;year&#39;, &#39;life_expectancy&#39;, ax6) print(&#39;Life expectancy at birth between 2000 and 2015&#39;) plt.show() . Life expectancy at birth between 2000 and 2015 . f, (ax1, ax2, ax3, ax4, ax5, ax6) = plt.subplots(1, 6, sharey=False, figsize=(20,5)) f.tight_layout() make_regplot(usa, &#39;purple&#39;, &#39;USA&#39;, &#39;year&#39;, &#39;gdp&#39;, ax1) ax1.set_ylabel(&#39;GDP / Billions USD&#39;) make_regplot(china, &#39;orange&#39;, &#39;China&#39;, &#39;year&#39;, &#39;gdp&#39;, ax2) make_regplot(germany, &#39;green&#39;, &#39;Germany&#39;, &#39;year&#39;, &#39;gdp&#39;, ax3) make_regplot(mexico, &#39;red&#39;, &#39;Mexico&#39;, &#39;year&#39;, &#39;gdp&#39;, ax4) make_regplot(chile, &#39;blue&#39;, &#39;Chile&#39;, &#39;year&#39;, &#39;gdp&#39;, ax5) make_regplot(zimbabwe, &#39;brown&#39;, &#39;Zimbabwe&#39;, &#39;year&#39;, &#39;gdp&#39;, ax6) print(&#39;Change in GDP between 2000 and 2015&#39;) plt.show() . Change in GDP between 2000 and 2015 . #function to calculate % change #for GDP calc colno = 3, for life expectancy calc colno = 2 def perc_change(country_df, colno): calc = round(((country_df.iloc[15, colno] - country_df.iloc[0, colno]) / country_df.iloc[0, colno]) *100) return calc countries = [&#39;Chile&#39;, &#39;China&#39;, &#39;Germany&#39;, &#39;Mexico&#39;, &#39;USA&#39;, &#39;Zimbabwe&#39;] gdp_change = [] for country in country_list: gdp_change.append(perc_change(country, 3)) dictgdp = {&#39;Country&#39;: countries, &#39;% change in GDP&#39;: gdp_change} gdpdf = pd.DataFrame(dictgdp) life_change = [] for country in country_list: life_change.append(perc_change(country, 2)) lifegdp = {&#39;Country&#39;: countries, &#39;% change in life expectancy&#39;: life_change} lifedf = pd.DataFrame(lifegdp) display(lifedf, gdpdf) . Country % change in life expectancy . 0 Chile | 4 | . 1 China | 6 | . 2 Germany | 4 | . 3 Mexico | 3 | . 4 USA | 3 | . 5 Zimbabwe | 32 | . Country % change in GDP . 0 Chile | 211 | . 1 China | 813 | . 2 Germany | 73 | . 3 Mexico | 69 | . 4 USA | 76 | . 5 Zimbabwe | 144 | . sns.scatterplot(data=df, y=&#39;life_expectancy&#39;, x=&#39;gdp&#39;, hue=&#39;country&#39;) plt.xlabel(&#39;GDP / Billions USD&#39;) plt.ylabel(&#39;Life expectancy / Years&#39;) plt.legend() plt.show() . #Normalise the data to do direct comparisons. def normalise_func(country_df): x = country_df.iloc[:, [2,3]] dfx = pd.DataFrame((x-x.min())/ (x.max() - x.min())) dfx.rename(columns={&#39;life_expectancy&#39; : &#39;age_norm&#39;, &#39;gdp&#39; : &#39;gdp_norm&#39;}, inplace=True) new_df = pd.concat([country_df, dfx], axis=1) return new_df norm_chile = normalise_func(chile) norm_china = normalise_func(china) norm_germany = normalise_func(germany) norm_mexico = normalise_func(mexico) norm_usa = normalise_func(usa) norm_zimbabwe = normalise_func(zimbabwe) concat_norm = pd.concat([norm_chile, norm_china, norm_germany, norm_mexico, norm_usa, norm_zimbabwe], axis=0) #print(norm_germany) #print(concat_norm) . sns.lmplot(data=concat_norm, x=&#39;gdp_norm&#39;, y=&#39;age_norm&#39;, hue=&#39;country&#39;) plt.xlabel(&#39;Normalised GDP&#39;) plt.ylabel(&#39;Normalised life expectancy&#39;) plt.title(&#39;Linear regressions of normalised life expectancy vs normalised GDP&#39;) #plt.legend() plt.axis(xmin = 0.0, xmax = 1.0, ymin = 0.0, ymax = 1.0) plt.show() . def make_regplot_norm(data, color, country, axisno): plot = sns.regplot(data=data, x=&#39;gdp_norm&#39;, y=&#39;age_norm&#39;, color=color, ax=axisno) #axisno.legend([country],loc=3) axisno.set_title(country) axisno.set_ylabel(&#39;Normalised life expectancy&#39;) axisno.set_xlabel(&#39;Normalised GDP&#39;) return plot f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=False, figsize=(20,5)) f.tight_layout() make_regplot_norm(norm_usa, &#39;purple&#39;, &#39;USA&#39;, ax1) make_regplot_norm(norm_china, &#39;orange&#39;, &#39;China&#39;, ax2) make_regplot_norm(norm_germany, &#39;green&#39;, &#39;Germany&#39;, ax3) plt.show() f, (ax4, ax5, ax6) = plt.subplots(1, 3, sharey=False, figsize=(20,5)) f.tight_layout() make_regplot_norm(norm_mexico, &#39;red&#39;, &#39;Mexico&#39;, ax4) make_regplot_norm(norm_chile, &#39;blue&#39;, &#39;Chile&#39;, ax5) make_regplot_norm(norm_zimbabwe, &#39;brown&#39;, &#39;Zimbabwe&#39;, ax6) plt.show() . Conclusion . There is a strong positive correlation between GDP and life expectancy at birth for the six countries considered - with the assumption there is a linear relationship between the two factors. | The positive trend between life expectancy and GDP is not always evident over shorter time frames as a marked change in GDP did not correspond to a change in life expectancy. Sometimes an increase in GDP corresponded to a decrease in life expectancy. | The highest GDP does not correspond to the highest life expectancy at birth, as shown by USA which has a very large GDP. | A large increase in GDP does not correlate to a large increase in life expectancy, as in the case of China and Chile both had a large % increase in GDP, which did not correspond to a large increase in life expectancy at birth. . | Overall there is a positive correlation present between GDP and life expectancy at birth. However, GDP is not likely to be the only factor affecting a country&#39;s life expectancy at birth. Other factors which may affect life expectancy at birth are a country&#39;s access to education and healthcare, wealth distribution and infrastructure. All of these play an important role and are related to GDP in some way, indicating GDP has an indirect effect in life expectancy at birth. . | At lower GDP an increase in this GDP appears to have a positive affect on life expectancy, as is the case with Zimbabwe. However, above a certain level, an increase in GDP does not appear to correlate to an increase in life expectancy. | .",
            "url": "https://lottesofcode.github.io/Portfolio/2022/05/18/GDP_Life_Expectancy.html",
            "relUrl": "/2022/05/18/GDP_Life_Expectancy.html",
            "date": " • May 18, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lottesofcode.github.io/Portfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lottesofcode.github.io/Portfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lottesofcode.github.io/Portfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lottesofcode.github.io/Portfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}